const {
  GoogleGenerativeAI,
  HarmCategory,
  HarmBlockThreshold,
} = require("@google/generative-ai");

const apiKey = process.env.NEXT_PUBLIC_GEMINI_API_KEY;
const genAI = new GoogleGenerativeAI(apiKey);

const model = genAI.getGenerativeModel({
  model: "gemini-1.5-flash",
});

const generationConfig = {
  temperature: 1,
  topP: 0.95,
  topK: 40,
  maxOutputTokens: 8192,
  responseMimeType: "application/json",
};

const generationConfig2 = {
  temperature: 1,
  topP: 0.95,
  topK: 40,
  maxOutputTokens: 8192,
  responseMimeType: "text/plain",
};


export const courseOutlineAIModel = model.startChat({
  generationConfig,
  history: [
    {
      role: "user",
      parts: [
        { text: "Generate a study material for <python> for <exam> and level of difficulty will be <easy> wilth summary of course, List of chapters along with summary for each chapter, topic list in each chapter, all result in JSON format only\n" },
      ],
    },
    {
      role: "model",
      parts: [
        { text: "```json\n{\n  \"courseSummary\": \"This easy-level Python course provides a foundational understanding of Python programming concepts.  It covers basic syntax, data types, control flow, and fundamental programming structures.  The course is designed to prepare students for a basic Python proficiency exam.\",\n  \"chapters\": [\n    {\n      \"chapterTitle\": \"Introduction to Python\",\n      \"chapterSummary\": \"This chapter introduces the basics of Python, including installation, setting up your environment, and writing your first program. It covers fundamental concepts like variables, data types, and basic operators.\",\n      \"topics\": [\n        \"What is Python?\",\n        \"Installing Python\",\n        \"Setting up your development environment (IDE/text editor)\",\n        \"Running your first Python program\",\n        \"Basic Syntax (Indentation, Comments)\",\n        \"Variables and Data Types (Integers, Floats, Strings, Booleans)\",\n        \"Basic Operators (+, -, *, /, //, %, **)\",\n        \"Type Conversion\"\n      ]\n    },\n    {\n      \"chapterTitle\": \"Control Flow\",\n      \"chapterSummary\": \"This chapter covers how to control the flow of execution in your programs using conditional statements and loops.\",\n      \"topics\": [\n        \"Conditional Statements (if, elif, else)\",\n        \"Boolean Logic (and, or, not)\",\n        \"Loops (for loop, while loop)\",\n        \"Break and Continue Statements\",\n        \"Nested Loops\"\n      ]\n    },\n    {\n      \"chapterTitle\": \"Data Structures\",\n      \"chapterSummary\": \"This chapter introduces fundamental data structures in Python, including lists, tuples, and dictionaries.\",\n      \"topics\": [\n        \"Lists (creation, accessing elements, methods)\",\n        \"Tuples (creation, accessing elements)\",\n        \"Dictionaries (creation, accessing elements, methods)\",\n        \"List Comprehensions (basic examples)\"\n      ]\n    },\n    {\n      \"chapterTitle\": \"Functions\",\n      \"chapterSummary\": \"This chapter teaches how to create and use functions to modularize your code and improve readability.\",\n      \"topics\": [\n        \"Defining Functions\",\n        \"Function Parameters and Arguments\",\n        \"Return Values\",\n        \"Scope of Variables\",\n        \"Function calls\"\n      ]\n    },\n    {\n      \"chapterTitle\": \"Input and Output\",\n      \"chapterSummary\": \"This chapter covers how to take input from the user and display output to the console.\",\n      \"topics\": [\n        \"Taking user input using `input()`\",\n        \"Displaying output using `print()`\",\n        \"Formatting output using f-strings\"\n      ]\n    }\n  ]\n}\n```\n" },
      ],
    },
  ],
});

// const result = await chatSession.sendMessage("INSERT_INPUT_HERE");
// console.log(result.response.text());




export const generateNotesAIModel = model.startChat({
  generationConfig2,
  history: [
    {
      role: "user",
      parts: [
        { text: "Generate exam material detail content for each chapter, Make sure to includes all topic point in the content, make sure to give content in HTML format (Do not Add HTML, Head, Body, title tag). The chapters' + \"{\\n      \\\"chapterTitle\\\": \\\"Advanced Microcontroller Architectures\\\",\\n      \\\"chapterSummary\\\": \\\"This chapter delves into the intricacies of advanced microcontroller architectures, exploring features like memory management units (MMUs), cache hierarchies, and specialized instruction sets for embedded applications.  Design considerations for power efficiency and real-time performance are emphasized.\\\",\\n      \\\"topics\\\": [\\n        \\\"Advanced RISC-V Architectures\\\",\\n        \\\"Memory Management Units (MMUs) and Virtual Memory\\\",\\n        \\\"Cache Coherence and Memory Hierarchy Design\\\",\\n        \\\"DSP Instructions and Accelerators\\\",\\n        \\\"Power Management Techniques in Microcontrollers\\\",\\n        \\\"Real-Time Operating System (RTOS) Support in Microcontroller Architectures\\\"\\n      ]\\n    }\"\n\ngive output like this\n\n{\n  \"chapterTitle\": \"Structural Analysis II\",\n  \"chapterSummary\": \"This chapter delves into advanced structural analysis techniques, including indeterminate structures, matrix methods, and influence lines. üèóÔ∏è\",\n  \"topics\": [\n    \"Indeterminate Structures: Analysis using Force and Displacement Methods\",\n    \"Matrix Methods of Structural Analysis\",\n    \"Influence Lines for Beams and Trusses\",\n    \"Plastic Analysis and Limit States Design\",\n    \"Advanced topics in Structural Stability\"\n  ],\n  \"content\": \"<h2>Structural Analysis II</h2>\\n<p>This chapter delves into advanced structural analysis techniques, moving beyond the basics to encompass indeterminate structures, matrix methods, and influence lines.</p>\\n\\n<h3>Indeterminate Structures: Analysis using Force and Displacement Methods</h3>\\n<p>This section covers the analysis of statically indeterminate structures.  Students will learn to solve indeterminate structures using both force methods (e.g., the force method, method of consistent deformations) and displacement methods (e.g., the displacement method, stiffness method).  The focus will be on understanding the fundamental principles, applying appropriate equations, and interpreting the results.  Various examples will illustrate these methods, including beams, frames, and trusses with different support conditions.</p>\\n\\n<h3>Matrix Methods of Structural Analysis</h3>\\n<p>This section introduces the use of matrices for structural analysis. Students will learn how to formulate and solve the stiffness matrix for various structural elements, assemble the global stiffness matrix for a complete structure, and apply load vectors to determine nodal displacements and member forces.  The advantages of using matrix methods for complex structures will be highlighted, along with the use of computational tools to facilitate the process.</p>\\n\\n<h3>Influence Lines for Beams and Trusses</h3>\\n<p>This section covers the concept of influence lines, which are graphical representations of the variation of a particular response (reaction, shear, moment) at a point in a structure due to a moving unit load.  Students will learn how to construct influence lines for beams and trusses using various methods and apply them to determine the maximum values of reactions, shear forces, and bending moments under moving loads.  The application of influence lines to live load analysis and design will be emphasized.</p>\\n\\n<h3>Plastic Analysis and Limit States Design</h3>\\n<p>This section introduces the concepts of plastic analysis and limit states design. Students will learn about the plastic behavior of materials and how to analyze structures based on their plastic moment capacity.  The principles of limit states design will be explained, including ultimate limit states and serviceability limit states, along with their application in structural design.  Examples will showcase the analysis and design of structures using plastic analysis and limit states design principles.</p>\\n\\n<h3>Advanced topics in Structural Stability</h3>\\n<p>This section covers buckling analysis of columns and frames. Students will learn different methods used to analyze buckling behavior such as Euler's formula, and the use of stability functions in analyzing different types of columns with different end conditions.  The concept of critical load, and effect of initial imperfections will also be discussed.</p>\"\n}\nin json format\n" },
      ],
    },
    {
      role: "model",
      parts: [
        { text: "```json\n{\n  \"chapterTitle\": \"Advanced Microcontroller Architectures\",\n  \"chapterSummary\": \"This chapter delves into the intricacies of advanced microcontroller architectures, exploring features like memory management units (MMUs), cache hierarchies, and specialized instruction sets for embedded applications.  Design considerations for power efficiency and real-time performance are emphasized.\",\n  \"topics\": [\n    \"Advanced RISC-V Architectures\",\n    \"Memory Management Units (MMUs) and Virtual Memory\",\n    \"Cache Coherence and Memory Hierarchy Design\",\n    \"DSP Instructions and Accelerators\",\n    \"Power Management Techniques in Microcontrollers\",\n    \"Real-Time Operating System (RTOS) Support in Microcontroller Architectures\"\n  ],\n  \"content\": \"<h2>Advanced Microcontroller Architectures</h2>\\n<p>This chapter explores advanced microcontroller architectures, focusing on features like memory management, cache systems, specialized instruction sets, and design considerations for power efficiency and real-time performance.</p>\\n\\n<h3>Advanced RISC-V Architectures</h3>\\n<p>This section delves into the advanced features of the RISC-V instruction set architecture (ISA). It covers topics such as privileged modes, vector extensions, custom instruction extensions, and advanced interrupt handling mechanisms. Students will learn how these features enable more complex and efficient embedded system design.  Emphasis will be placed on understanding the advantages and implications of various RISC-V extensions for specific application needs.</p>\\n\\n<h3>Memory Management Units (MMUs) and Virtual Memory</h3>\\n<p>This section explores the role of Memory Management Units (MMUs) in modern microcontrollers. It covers topics including virtual memory, address translation, memory protection, and page table management. Students will learn how MMUs enable complex memory management tasks, such as supporting multiple processes, implementing memory access control, and using virtual memory to handle larger address spaces than physical memory.  The discussion will focus on the implementation details and the benefits of using MMUs in embedded applications.</p>\\n\\n<h3>Cache Coherence and Memory Hierarchy Design</h3>\\n<p>This section focuses on cache memory systems in microcontrollers. Topics include cache organization (e.g., L1, L2 caches), cache replacement policies, and cache coherence protocols (e.g., snooping protocols). Students will learn how to design efficient cache systems to reduce memory access latency and improve overall system performance.  Considerations for cache performance in real-time systems and the impact of different cache configurations on power consumption will be discussed.</p>\\n\\n<h3>DSP Instructions and Accelerators</h3>\\n<p>This section covers the use of Digital Signal Processing (DSP) instructions and hardware accelerators in microcontrollers. It includes topics such as specialized instructions for signal processing operations (e.g., MAC, FFT), and the use of hardware accelerators for complex math and signal processing calculations. Students will understand how these features enable high-performance signal processing in embedded systems.  The practical application of DSP instructions will be demonstrated through examples, emphasizing their efficiency compared to general-purpose instruction execution for signal processing.</p>\\n\\n<h3>Power Management Techniques in Microcontrollers</h3>\\n<p>This section examines power management techniques in microcontrollers. Topics include clock gating, voltage scaling, power modes (e.g., sleep, deep sleep), and dynamic power management (DPM). Students will learn how to reduce power consumption in embedded systems through effective power management techniques. The analysis and design of low-power microcontrollers suitable for battery-powered applications will also be covered.</p>\\n\\n<h3>Real-Time Operating System (RTOS) Support in Microcontroller Architectures</h3>\\n<p>This section focuses on the architectural features of microcontrollers that support Real-Time Operating Systems (RTOS). Topics include hardware support for task scheduling, context switching, interrupt management, and inter-process communication mechanisms. Students will understand how microcontrollers are designed to efficiently run RTOS kernels and support real-time performance.  The interaction between the RTOS and microcontroller hardware will be analyzed, along with practical examples using specific RTOS features and common design patterns.</p>\"\n}\n```\n" },
      ],
    },
    {
      role: "user",
      parts: [
        { text: "can you add tailwind css to the html code to design it properly\n" },
      ],
    },
    {
      role: "model",
      parts: [
        { text: "```json\n{\n  \"chapterTitle\": \"Advanced Microcontroller Architectures\",\n  \"chapterSummary\": \"This chapter delves into the intricacies of advanced microcontroller architectures, exploring features like memory management units (MMUs), cache hierarchies, and specialized instruction sets for embedded applications.  Design considerations for power efficiency and real-time performance are emphasized.\",\n  \"topics\": [\n    \"Advanced RISC-V Architectures\",\n    \"Memory Management Units (MMUs) and Virtual Memory\",\n    \"Cache Coherence and Memory Hierarchy Design\",\n    \"DSP Instructions and Accelerators\",\n    \"Power Management Techniques in Microcontrollers\",\n    \"Real-Time Operating System (RTOS) Support in Microcontroller Architectures\"\n  ],\n  \"content\": \"<div class=\\\"container mx-auto p-4\\\">\\n  <h2 class=\\\"text-2xl font-bold mb-4\\\">Advanced Microcontroller Architectures</h2>\\n  <p class=\\\"text-gray-700 mb-6\\\">This chapter explores advanced microcontroller architectures, focusing on features like memory management, cache systems, specialized instruction sets, and design considerations for power efficiency and real-time performance.</p>\\n\\n  <div class=\\\"mb-8\\\">\\n    <h3 class=\\\"text-xl font-semibold mb-2\\\">Advanced RISC-V Architectures</h3>\\n    <p class=\\\"text-gray-700\\\">This section delves into the advanced features of the RISC-V instruction set architecture (ISA). It covers topics such as privileged modes, vector extensions, custom instruction extensions, and advanced interrupt handling mechanisms. Students will learn how these features enable more complex and efficient embedded system design.  Emphasis will be placed on understanding the advantages and implications of various RISC-V extensions for specific application needs.</p>\\n  </div>\\n\\n  <div class=\\\"mb-8\\\">\\n    <h3 class=\\\"text-xl font-semibold mb-2\\\">Memory Management Units (MMUs) and Virtual Memory</h3>\\n    <p class=\\\"text-gray-700\\\">This section explores the role of Memory Management Units (MMUs) in modern microcontrollers. It covers topics including virtual memory, address translation, memory protection, and page table management. Students will learn how MMUs enable complex memory management tasks, such as supporting multiple processes, implementing memory access control, and using virtual memory to handle larger address spaces than physical memory.  The discussion will focus on the implementation details and the benefits of using MMUs in embedded applications.</p>\\n  </div>\\n\\n  <div class=\\\"mb-8\\\">\\n    <h3 class=\\\"text-xl font-semibold mb-2\\\">Cache Coherence and Memory Hierarchy Design</h3>\\n    <p class=\\\"text-gray-700\\\">This section focuses on cache memory systems in microcontrollers. Topics include cache organization (e.g., L1, L2 caches), cache replacement policies, and cache coherence protocols (e.g., snooping protocols). Students will learn how to design efficient cache systems to reduce memory access latency and improve overall system performance.  Considerations for cache performance in real-time systems and the impact of different cache configurations on power consumption will be discussed.</p>\\n  </div>\\n\\n  <div class=\\\"mb-8\\\">\\n    <h3 class=\\\"text-xl font-semibold mb-2\\\">DSP Instructions and Accelerators</h3>\\n    <p class=\\\"text-gray-700\\\">This section covers the use of Digital Signal Processing (DSP) instructions and hardware accelerators in microcontrollers. It includes topics such as specialized instructions for signal processing operations (e.g., MAC, FFT), and the use of hardware accelerators for complex math and signal processing calculations. Students will understand how these features enable high-performance signal processing in embedded systems.  The practical application of DSP instructions will be demonstrated through examples, emphasizing their efficiency compared to general-purpose instruction execution for signal processing.</p>\\n  </div>\\n\\n <div class=\\\"mb-8\\\">\\n    <h3 class=\\\"text-xl font-semibold mb-2\\\">Power Management Techniques in Microcontrollers</h3>\\n    <p class=\\\"text-gray-700\\\">This section examines power management techniques in microcontrollers. Topics include clock gating, voltage scaling, power modes (e.g., sleep, deep sleep), and dynamic power management (DPM). Students will learn how to reduce power consumption in embedded systems through effective power management techniques. The analysis and design of low-power microcontrollers suitable for battery-powered applications will also be covered.</p>\\n  </div>\\n\\n  <div class=\\\"mb-8\\\">\\n    <h3 class=\\\"text-xl font-semibold mb-2\\\">Real-Time Operating System (RTOS) Support in Microcontroller Architectures</h3>\\n    <p class=\\\"text-gray-700\\\">This section focuses on the architectural features of microcontrollers that support Real-Time Operating Systems (RTOS). Topics include hardware support for task scheduling, context switching, interrupt management, and inter-process communication mechanisms. Students will understand how microcontrollers are designed to efficiently run RTOS kernels and support real-time performance.  The interaction between the RTOS and microcontroller hardware will be analyzed, along with practical examples using specific RTOS features and common design patterns.</p>\\n  </div>\\n</div>\"\n}\n```\n" },
      ],
    },
    {
      role: "user",
      parts: [
        { text: "keep the content in ''' ... ''' form\n" },
      ],
    },
    {
      role: "model",
      parts: [
        { text: "```json\n{\n  \"chapterTitle\": \"Advanced Microcontroller Architectures\",\n  \"chapterSummary\": \"This chapter delves into the intricacies of advanced microcontroller architectures, exploring features like memory management units (MMUs), cache hierarchies, and specialized instruction sets for embedded applications.  Design considerations for power efficiency and real-time performance are emphasized.\",\n  \"topics\": [\n    \"Advanced RISC-V Architectures\",\n    \"Memory Management Units (MMUs) and Virtual Memory\",\n    \"Cache Coherence and Memory Hierarchy Design\",\n    \"DSP Instructions and Accelerators\",\n    \"Power Management Techniques in Microcontrollers\",\n    \"Real-Time Operating System (RTOS) Support in Microcontroller Architectures\"\n  ],\n  \"content\": '''<div class=\"container mx-auto p-4\">\n  <h2 class=\"text-2xl font-bold mb-4\">Advanced Microcontroller Architectures</h2>\n  <p class=\"text-gray-700 mb-6\">This chapter explores advanced microcontroller architectures, focusing on features like memory management, cache systems, specialized instruction sets, and design considerations for power efficiency and real-time performance.</p>\n\n  <div class=\"mb-8\">\n    <h3 class=\"text-xl font-semibold mb-2\">Advanced RISC-V Architectures</h3>\n    <p class=\"text-gray-700\">This section delves into the advanced features of the RISC-V instruction set architecture (ISA). It covers topics such as privileged modes, vector extensions, custom instruction extensions, and advanced interrupt handling mechanisms. Students will learn how these features enable more complex and efficient embedded system design.  Emphasis will be placed on understanding the advantages and implications of various RISC-V extensions for specific application needs.</p>\n  </div>\n\n  <div class=\"mb-8\">\n    <h3 class=\"text-xl font-semibold mb-2\">Memory Management Units (MMUs) and Virtual Memory</h3>\n    <p class=\"text-gray-700\">This section explores the role of Memory Management Units (MMUs) in modern microcontrollers. It covers topics including virtual memory, address translation, memory protection, and page table management. Students will learn how MMUs enable complex memory management tasks, such as supporting multiple processes, implementing memory access control, and using virtual memory to handle larger address spaces than physical memory.  The discussion will focus on the implementation details and the benefits of using MMUs in embedded applications.</p>\n  </div>\n\n  <div class=\"mb-8\">\n    <h3 class=\"text-xl font-semibold mb-2\">Cache Coherence and Memory Hierarchy Design</h3>\n    <p class=\"text-gray-700\">This section focuses on cache memory systems in microcontrollers. Topics include cache organization (e.g., L1, L2 caches), cache replacement policies, and cache coherence protocols (e.g., snooping protocols). Students will learn how to design efficient cache systems to reduce memory access latency and improve overall system performance.  Considerations for cache performance in real-time systems and the impact of different cache configurations on power consumption will be discussed.</p>\n  </div>\n\n  <div class=\"mb-8\">\n    <h3 class=\"text-xl font-semibold mb-2\">DSP Instructions and Accelerators</h3>\n    <p class=\"text-gray-700\">This section covers the use of Digital Signal Processing (DSP) instructions and hardware accelerators in microcontrollers. It includes topics such as specialized instructions for signal processing operations (e.g., MAC, FFT), and the use of hardware accelerators for complex math and signal processing calculations. Students will understand how these features enable high-performance signal processing in embedded systems.  The practical application of DSP instructions will be demonstrated through examples, emphasizing their efficiency compared to general-purpose instruction execution for signal processing.</p>\n  </div>\n\n <div class=\"mb-8\">\n    <h3 class=\"text-xl font-semibold mb-2\">Power Management Techniques in Microcontrollers</h3>\n    <p class=\"text-gray-700\">This section examines power management techniques in microcontrollers. Topics include clock gating, voltage scaling, power modes (e.g., sleep, deep sleep), and dynamic power management (DPM). Students will learn how to reduce power consumption in embedded systems through effective power management techniques. The analysis and design of low-power microcontrollers suitable for battery-powered applications will also be covered.</p>\n  </div>\n\n  <div class=\"mb-8\">\n    <h3 class=\"text-xl font-semibold mb-2\">Real-Time Operating System (RTOS) Support in Microcontroller Architectures</h3>\n    <p class=\"text-gray-700\">This section focuses on the architectural features of microcontrollers that support Real-Time Operating Systems (RTOS). Topics include hardware support for task scheduling, context switching, interrupt management, and inter-process communication mechanisms. Students will understand how microcontrollers are designed to efficiently run RTOS kernels and support real-time performance.  The interaction between the RTOS and microcontroller hardware will be analyzed, along with practical examples using specific RTOS features and common design patterns.</p>\n  </div>\n</div>'''\n}\n```\n" },
      ],
    },
  ],
});

// const result = await chatSession.sendMessage("INSERT_INPUT_HERE");
// console.log(result.response.text());


export const GenerateStudyTypeContentAiModel = model.startChat({
  generationConfig,
  history: [
    {
      role: "user",
      parts: [
        { text: "Generate the flashcard  on topic : Flutter fundamentals, user interface (ui) development basic app navigation in JSON format with front and back content, maximum 15" },
      ],
    },
    {
      role: "model",
      parts: [
        { text: "```json\n[\n  {\n    \"front\": \"What is a Widget in Flutter?\",\n    \"back\": \"A Widget is the fundamental building block of a Flutter UI.  Everything you see on the screen is a widget, whether it's a button, text, image, or even the layout itself.\"\n  },\n  {\n    \"front\": \"What are the two main types of widgets?\",\n    \"back\": \"StatelessWidget and StatefulWidget. StatelessWidgets don't change their state, while StatefulWidgets can update their appearance based on changes in data.\"\n  },\n  {\n    \"front\": \"Explain the difference between `Column` and `Row` widgets.\",\n    \"back\": \"`Column` arranges widgets vertically, one below the other. `Row` arranges widgets horizontally, side-by-side.\"\n  },\n  {\n    \"front\": \"What is the purpose of the `Scaffold` widget?\",\n    \"back\": \"Provides a basic visual layout structure for your app, including an AppBar, body, and potentially a bottomNavigationBar and floatingActionButton.\"\n  },\n  {\n    \"front\": \"How do you add text to a Flutter app?\",\n    \"back\": \"Using the `Text` widget.  You can specify style, text, and other properties within it.\"\n  },\n  {\n    \"front\": \"What is the `Container` widget used for?\",\n    \"back\": \"Provides a box with padding, margin, background color, borders, and other visual customizations for its child widget(s).\"\n  },\n  {\n    \"front\": \"How to create a basic button in Flutter?\",\n    \"back\": \"Use the `ElevatedButton`, `TextButton`, or `OutlinedButton` widget.  They all take an `onPressed` callback function.\"\n  },\n  {\n    \"front\": \"What is the role of `BuildContext`?\",\n    \"back\": \"Provides information about the location of a widget within the widget tree. Used for accessing themes, services, and other contextual information.\"\n  },\n  {\n    \"front\": \"Name a common way to navigate between screens in Flutter.\",\n    \"back\": \"Using `Navigator.push` to push a new route onto the navigation stack and `Navigator.pop` to remove a route.\"\n  },\n  {\n    \"front\": \"What is a Material App?\",\n    \"back\": \"A widget that provides a Material Design implementation, including a theme and other built-in features for creating Android-style apps.\"\n  },\n  {\n    \"front\": \"What is a Cupertino App?\",\n    \"back\": \"A widget that provides a Cupertino (iOS-style) implementation, including a theme and other built-in features for creating iOS-style apps.\"\n  },\n  {\n    \"front\": \"Explain the concept of routing in Flutter.\",\n    \"back\": \"Routing defines how different screens (routes) are managed and transitioned between in an application, often using named routes.\"\n  },\n  {\n    \"front\": \"How do you define named routes?\",\n    \"back\": \"Using the `routes` property in the `MaterialApp` or `CupertinoApp` widget, associating route names with widget builders.\"\n  },\n  {\n    \"front\": \"What is `setState()` used for?\",\n    \"back\": \"In a StatefulWidget, `setState()` is used to rebuild the widget tree, reflecting changes in the widget's state.\"\n  },\n  {\n    \"front\": \"What is the purpose of `Key` widgets?\",\n    \"back\": \"Keys help Flutter identify widgets across rebuilds, ensuring state preservation even when the widget's position in the tree changes.\"\n  }\n]\n```\n" },
      ],
    },
  ],
});

export const GenerateQuizAiModel = model.startChat({
  generationConfig,
  history: [
    {
      role: "user",
      parts: [
        { text: "Generate Quiz on topic : Flutter Fundamentals, User Interface (ui) Development, Basic App Navigation with Question and Options along with correct answer in JSON format" },
      ],
    },
    {
      role: "model",
      parts: [
        { text: "```json\n{\n  \"quizTitle\": \"Flutter Fundamentals & UI Development Quiz\",\n  \"questions\": [\n    {\n      \"question\": \"What is the fundamental building block of a Flutter UI?\",\n      \"options\": [\"Widget\", \"Layout\", \"Function\", \"Class\"],\n      \"correctAnswer\": \"Widget\"\n    },\n    {\n      \"question\": \"Which widget is used to arrange children in a column?\",\n      \"options\": [\"Row\", \"Column\", \"Stack\", \"Container\"],\n      \"correctAnswer\": \"Column\"\n    },\n    {\n      \"question\": \"What is the purpose of the `Scaffold` widget?\",\n      \"options\": [\"To create complex animations\", \"To manage the app's state\", \"To provide a basic visual structure for an app screen\", \"To handle network requests\"],\n      \"correctAnswer\": \"To provide a basic visual structure for an app screen\"\n    },\n    {\n      \"question\": \"Which widget is best suited for displaying a list of items that can be scrolled?\",\n      \"options\": [\"ListView\", \"GridView\", \"Container\", \"Row\"],\n      \"correctAnswer\": \"ListView\"\n    },\n    {\n      \"question\": \"How do you navigate from one screen to another in Flutter using named routes?\",\n      \"options\": [\"`Navigator.push(context, MaterialPageRoute(builder: (context) => NextScreen()));`\", \"`Navigator.pop(context);`\", \"`Navigator.pushNamed(context, '/nextScreen');`\", \"All of the above\"],\n      \"correctAnswer\": \"`Navigator.pushNamed(context, '/nextScreen');`\"\n    },\n    {\n      \"question\": \"What is the role of a `BuildContext` in Flutter?\",\n      \"options\": [\"To store app data\", \"To manage the app's theme\", \"To provide information about the location of a widget within the widget tree\", \"To handle user input\"],\n      \"correctAnswer\": \"To provide information about the location of a widget within the widget tree\"\n    },\n    {\n      \"question\": \"Which widget is used to display an image in Flutter?\",\n      \"options\": [\"Image.asset\", \"Image.network\", \"Icon\", \"Text\"],\n      \"correctAnswer\": \"Image.asset\"\n    },\n    {\n      \"question\": \"What does `setState()` do in Flutter?\",\n      \"options\": [\"Navigates to a new screen\", \"Updates the UI to reflect changes in the state\", \"Handles user input\", \"Makes a network request\"],\n      \"correctAnswer\": \"Updates the UI to reflect changes in the state\"\n    },\n    {\n      \"question\": \"Which widget is used to create a button in Flutter?\",\n      \"options\": [\"TextButton\", \"ElevatedButton\", \"IconButton\", \"All of the above\"],\n      \"correctAnswer\": \"All of the above\"\n    },\n    {\n      \"question\": \"What is the difference between `StatelessWidget` and `StatefulWidget`?\",\n      \"options\": [\"`StatelessWidget` has a mutable state, while `StatefulWidget` does not.\", \"`StatefulWidget` has a mutable state, while `StatelessWidget` does not.\", \"They are essentially the same.\", \"There is no difference.\"],\n      \"correctAnswer\": \"`StatefulWidget` has a mutable state, while `StatelessWidget` does not.\"\n    }\n  ]\n}\n```\n" },
      ],
    },
  ],
});


